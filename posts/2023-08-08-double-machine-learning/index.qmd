---
title: "Double Machine Learning"
author: "Lawrence Wu"    
date: "2023-08-08"
categories: ["Causal Inference"]
draft: true
---

At KDD2023 I was introduced to the term "Double Machine Learning" (DML). I was surprised I had never heard the term before so here are some notes on this important method in causal machine learning from a conversation with GPT-4. I am very impressed with GPT-4's ability to help explain complex concepts especially in areas where there there are libraries and code involved.

# Double Machine Learning (DML)

Double machine learning (DML) is a methodology developed to estimate causal effects or treatment effects in the presence of a high-dimensional set of controls. This technique is particularly useful in scenarios where there are a lot of control variables, and we want to adjust for confounding effects to accurately determine the impact of a particular treatment or variable of interest.

## Concept and its Benefits

### Concept

**Problem**: Suppose you're interested in estimating the causal effect of a treatment variable \( T \) on an outcome \( Y \), while controlling for a high-dimensional set of covariates \( X \). The relationship could be something like \( Y = \alpha + \beta T + g(X) + \epsilon \), where \( g(X) \) is a potentially complex and high-dimensional function, and \( \epsilon \) is an error term.

**High-Dimensionality Issue**: Directly estimating \( \beta \) is challenging because of the high dimensionality of \( g(X) \). Traditional methods might suffer from overfitting or might not capture the nuanced relationship of \( X \) with \( Y \).

**Solution via DML**: DML breaks down the problem into two stages:

1. **First Stage**: Use machine learning methods to predict \( Y \) and \( T \) based on \( X \). Obtain the residuals from these predictions.
2. **Second Stage**: Regress the residuals of \( Y \) on the residuals of \( T \) to estimate \( \beta \). This step isolates the effect of \( T \) on \( Y \), controlling for \( X \), without directly modeling \( g(X) \).

### Benefits

- **Flexibility**: DML doesn't make strong assumptions about the functional forms of relationships, allowing for the use of flexible ML techniques.
- **Robustness**: By working with residuals, DML reduces concerns about model misspecification. Even if the first-stage models aren't perfect, as long as they're reasonably good, the second-stage estimate of \( \beta \) can still be consistent and accurate.
- **High-Dimensional Controls**: DML is particularly suited for cases with many control variables. This is common in modern datasets where one might have a vast number of potential confounders.
- **Interpretability**: The final result, \( \beta \), provides a clear and interpretable estimate of the causal effect of \( T \) on \( Y \).

### Example

Imagine you want to estimate the effect of a training program (treatment \( T \)) on employee performance (outcome \( Y \)), controlling for a range of employee attributes \( X \) (like age, experience, past performance metrics, personality scores, and so on). Using DML, you would first predict performance and program participation based on all these controls using ML models. Then, you'd isolate the unexplained variations (residuals) of performance and program participation and estimate the effect of the training program using these residuals.

## Conclusion

Double Machine Learning offers a robust and flexible way to estimate causal effects in high-dimensional settings, combining the strengths of traditional econometric methods with modern machine learning techniques.

### Source

Chernozhukov, V., Chetverikov, D., Demirer, M., Duflo, E., Hansen, C., Newey, W., & Robins, J. (2018). Double/debiased machine learning for treatment and structural parameters. The Econometrics Journal, 21(1), C1-C68.

# How is the DML different and better than the methods that were used before this method was introduced?

Double Machine Learning (DML) was introduced to address some of the limitations and challenges of traditional methods in econometrics, especially in settings with high-dimensional controls. Here's a comparison of DML with conventional approaches and an overview of its advantages:

## Traditional Methods

### Linear Regression with Controls

Traditionally, if researchers wanted to control for confounding variables, they would include these controls in a linear regression. But, with high-dimensional controls, this approach faces issues like overfitting or multicollinearity.

### Instrumental Variables (IV)

IV methods are used when the treatment variable is endogenous (correlated with the error term). IV requires the identification and use of an instrument that affects the treatment but has no direct effect on the outcome. Finding such instruments can be challenging.

### Difference-in-Differences (DiD)

DiD estimates causal effects by looking at changes in outcomes over time between a group that receives the treatment and a group that doesn't. This method assumes that the two groups would have followed parallel trends in the absence of treatment, an assumption that's sometimes hard to validate.

### Matching and Propensity Score Methods

These involve pairing treated and untreated subjects that have similar observable characteristics. It's often difficult to balance all covariates, especially in high dimensions, and unobserved confounding remains a challenge.

## Advantages of DML

### Flexibility with High-Dimensional Controls

Traditional methods struggle with many control variables due to overfitting, multicollinearity, or the curse of dimensionality. DML can handle high-dimensional controls efficiently by leveraging machine learning techniques.

### Robustness to Model Misspecification

DML's two-stage process (predicting using ML and then regressing the residuals) ensures that even if the first-stage predictions aren't perfect, the causal estimate can still be consistent and accurate.

### Leverages Machine Learning

By integrating machine learning into causal inference, DML can use complex, non-linear models to control for confounding, something that's challenging with traditional linear methods.

### No Need for Strong Instruments or Parallel Trends

Unlike IV or DiD, DML doesn't rely on finding strong instruments or making assumptions about parallel trends, making it applicable in a broader range of scenarios.

### Interoperability with Other Techniques

DML can be combined with other methods like instrumental variables (e.g., in the form of Double/Debiased Machine Learning with Instruments) to tackle more complex causal questions.

In essence, while traditional econometric methods have their value and are optimal in certain settings, DML provides a flexible and robust framework for causal inference in modern datasets with many covariates. It bridges the gap between the strengths of classical econometric methods and the power of machine learning.

# Can you give me 2-3 examples of applying DML in a human resources setting? Explain it using the variable X (Confounders), T (Treatment) and Y (Outcome)

Double Machine Learning (DML) can be an incredibly useful tool in the Human Resources (HR) context, particularly when one wants to infer causal relationships while adjusting for many potential confounding variables. Here are three examples applying DML in an HR setting:

## 1. Impact of Training Programs on Employee Productivity

- **T (Treatment):** Participation in a specialized training program.
- **Y (Outcome):** Employee productivity (could be measured as tasks completed per day, quality scores, or any other relevant metric).
- **X (Confounders):**
  - Age of the employee.
  - Years of experience in the field.
  - Educational background.
  - Previous training programs attended.
  - Personality test scores.
  - Prior productivity metrics.
- **DML Application:** HR wants to understand if the new training program truly increases productivity. By employing DML, they can control for a vast array of confounders (like age, experience, prior training, etc.) to ascertain the genuine causal effect of the training on productivity.

## 2. Evaluating the Effects of Flexible Work Hours on Employee Satisfaction

- **T (Treatment):** Implementation of flexible work hours (e.g., 4-day work week, flexi-timings).
- **Y (Outcome):** Employee satisfaction scores (from regular employee surveys or feedback forms).
- **X (Confounders):**
  - Age of the employee.
  - Department or team (e.g., sales, IT, management).
  - Commute time to the office.
  - Number of dependents (like children).
  - Tenure at the company.
  - Previous satisfaction scores.
- **DML Application:** HR is considering a policy change to offer more flexible working hours. They implement a pilot program in a few departments and then wish to measure its effect on employee satisfaction. With many potential confounders, DML can help isolate the true impact of the flexible hours policy on satisfaction.

## 3. Understanding the Causal Effect of Health Benefits on Employee Retention

- **T (Treatment):** Provision of a comprehensive health benefits package.
- **Y (Outcome):** Employee retention rate (measured as the number of years an employee stays with the company or a binary outcome of whether they stayed for a given period).
- **X (Confounders):**
  - Age of the employee.
  - Salary and other financial incentives.
  - Department or team.
  - Job role and responsibilities.
  - Previous job-switching history.
  - Size of the family or number of dependents.
- **DML Application:** An organization introduces a new health benefits package, theorizing that it would lead to higher retention rates. However, before scaling it company-wide, they want to understand its true causal effect. Using DML, they can adjust for various confounding factors like salary, job role, and personal circumstances to determine the genuine influence of the health benefits on retention.

In each of these scenarios, the objective is to tease out the causal relationship between a specific HR intervention (T) and an outcome of interest (Y), all while accounting for a myriad of confounding variables (X) that might distort this relationship. By integrating DML techniques, HR departments can make more informed decisions based on robust causal inferences.

# Can you give me some code in Python to implement the first use case with clear comments too?

Certainly! Below is a simplified Python code that applies Double Machine Learning (DML) to the first use case: evaluating the impact of a specialized training program on employee productivity. The code assumes you have data with relevant columns for treatment, outcome, and confounders.

For this example, I'm using the EconML library, which offers a robust implementation of DML among other causal inference tools.

```python
# Required Libraries
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from econml.dml import LinearDML

# Load your dataset
# df = pd.read_csv('your_data_file.csv')

# Simulated dataset for the sake of this example
np.random.seed(0)
n = 1000
# Confounders
age = np.random.randint(20, 60, size=n)
years_of_experience = np.random.randint(0, 40, size=n)
prior_productivity = np.random.normal(50, 10, n)

# Treatment: whether they attended the training or not (1 for yes, 0 for no)
treatment = np.random.binomial(1, 0.5, n)

# Outcome: productivity influenced by treatment, age, experience and some noise
productivity = (3 * treatment + 0.05 * age + 0.3 * years_of_experience + 
                0.5 * prior_productivity + np.random.normal(0, 5, n))

df = pd.DataFrame({
    'age': age, 'experience': years_of_experience, 'prior_productivity': prior_productivity,
    'treatment': treatment, 'productivity': productivity
})

# Define the treatment, outcome, and confounders
T = df['treatment']
Y = df['productivity']
X = df[['age', 'experience', 'prior_productivity']]

# Define the machine learning model to use; here we're using linear regression for simplicity
ml_model = LinearRegression()

# Initialize the DML model
dml_model = LinearDML(model_y=ml_model, model_t=ml_model)
dml_model.fit(Y, T, X=X)

# Retrieve the causal effect (average treatment effect or ATE)
ate = dml_model.ate()

print(f"Average Treatment Effect of the Training Program on Productivity: {ate:.3f}")
```

Here's what the code does:

1. Imports required libraries.
2. Either loads or simulates a dataset with treatment, outcome, and confounders.
3. Defines the treatment, outcome, and confounders from the dataset.
4. Sets up the machine learning model to use. In this simple example, it's linear regression, but more complex models like random forests or gradient boosting machines can be used.
5. Initializes and fits the DML model.
6. Retrieves the average treatment effect (ATE) of the training on productivity.

# Can you implement the above use case in Python without econml for pedagogical purposes?

Absolutely. Implementing Double Machine Learning (DML) without relying on specialized libraries will require a bit more manual work, but it's quite educational.

Here's a basic implementation of DML for the first use case:

```python
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression

# Simulate the dataset
np.random.seed(0)
n = 1000
# Confounders
age = np.random.randint(20, 60, size=n)
years_of_experience = np.random.randint(0, 40, size=n)
prior_productivity = np.random.normal(50, 10, n)

# Treatment: whether they attended the training or not (1 for yes, 0 for no)
treatment = np.random.binomial(1, 0.5, n)

# Outcome: productivity influenced by treatment, age, experience, and some noise
productivity = (3 * treatment + 0.05 * age + 0.3 * years_of_experience +
                0.5 * prior_productivity + np.random.normal(0, 5, n))

df = pd.DataFrame({
    'age': age, 'experience': years_of_experience, 'prior_productivity': prior_productivity,
    'treatment': treatment, 'productivity': productivity
})

# Define the treatment, outcome, and confounders
T = df['treatment'].values.reshape(-1, 1)
Y = df['productivity']
X = df[['age', 'experience', 'prior_productivity']]

# Step 1: Partial out the effect of X on T and Y using Linear Regression
model_t = LinearRegression().fit(X, T)
residual_T = T - model_t.predict(X)

model_y = LinearRegression().fit(X, Y)
residual_Y = Y - model_y.predict(X)

# Step 2: Regress the residuals of Y on the residuals of T to obtain the treatment effect
ate_model = LinearRegression().fit(residual_T, residual_Y)
ate = ate_model.coef_[0]

print(f"Average Treatment Effect of the Training Program on Productivity: {ate:.3f}")
```

Here's the basic workflow:

1. **Partial Out the Effects of Confounders (X)**: We first "partial out" the effects of the confounders \( X \) on both the treatment \( T \) and outcome \( Y \) using linear regression. This leaves us with residuals for \( T \) and \( Y \) that represent the portions of \( T \) and \( Y \) that are not explained by \( X \).

2. **Regress the Residuals**: We then regress the residual of \( Y \) on the residual of \( T \). The coefficient of this regression is our estimate of the average treatment effect.

This method uses the concept that by "controlling" for \( X \) (through partialling out its effects), any remaining relationship between \( T \) and \( Y \) should be causal, under the assumption that there are no unobserved confounders.

This is a basic pedagogical introduction to DML. In practice, the methodology can get more intricate, especially when leveraging more complex models, handling various assumptions, and ensuring the robustness of the results.


# Do the ML models at each of those steps need to be the same?

No, the machine learning models used to partial out the effects of the confounders on the treatment \( T \) and the outcome \( Y \) do not need to be the same in Double Machine Learning (DML). In fact, one of the strengths of DML is its flexibility in allowing different models for different parts of the process.

## Here's why you might choose different models:

### Different Natures of Relationships
The relationship between the confounders and the treatment might be different from the relationship between the confounders and the outcome. For instance, a non-linear model like a decision tree or random forest might capture the relationship between the confounders and the treatment best, while a linear model might be most appropriate for the relationship between the confounders and the outcome.

### Model Performance Considerations
In some settings, certain machine learning models might perform better (in terms of predictive accuracy) for the treatment assignment, while others might be better suited for modeling the outcome.

### Computational Considerations
In some scenarios, especially with large datasets, computational efficiency might dictate the choice of models. Training a complex model might be computationally prohibitive for one task but feasible for another, depending on the data's dimensionality and the relationships present.

While DML allows for such flexibility, it's important to remember the foundational assumption: both models (for \( T \) and \( Y \)) should be sufficiently rich to capture the true relationships in the data. If the models are misspecified or too simplistic, it can introduce bias in the estimated treatment effects.

In practice, using cross-validation or other model selection techniques can help determine which models are best suited for each step in the DML process.

# How do you handle training and test data splits in this method?

Handling training and test data splits in Double Machine Learning (DML) is crucial to ensure the validity and robustness of the causal effect estimates. In DML, cross-fitting or cross-validation plays a central role in avoiding overfitting and ensuring that nuisance estimates do not inadvertently leak information about the treatment effect.

## Here's how you can handle training and test data splits in DML:

### 1. Cross-Fitting:
Cross-fitting involves splitting the dataset into \( K \) folds (similar to \( K \)-fold cross-validation in standard machine learning). For each fold, the following steps are taken:

- **Training on \( K-1 \) folds:** Train the ML models for the treatment and outcome on \( K-1 \) folds.
- **Predicting on the left-out fold:** Use the trained models to predict the treatment and outcome for the left-out fold, producing residuals.
- **Repeat:** Perform the same operation \( K \) times, each time leaving out a different fold.
- **Finally, with the residuals produced from all the folds, you can estimate the treatment effect.**

### 2. Train-Test Split:
A simpler approach involves just splitting the data into a training set and a test set.

- **Training on the training set:** Train the ML models for the treatment and outcome on the training set.
- **Predicting on the test set:** Use the trained models to predict the treatment and outcome for the test set, producing residuals.
- **Estimating the treatment effect:** With the residuals from the test set, estimate the treatment effect.

This method is less robust than cross-fitting but can be computationally less intensive.

## Notes:
- **Overfitting Concerns:** Without proper cross-fitting or a train-test split, DML can overfit. This is because the ML models for treatment and outcome might fit the noise in the data, leading to biased nuisance estimates and, subsequently, biased treatment effect estimates.
- **Cross-Fitting is Preferred:** Cross-fitting is typically preferred in DML because it helps ensure that the estimated causal effects are not driven by overfitting to the idiosyncrasies in the data. It also provides a more robust estimate of the treatment effect across different subsets of the data.
- **Final Model Assessment:** After obtaining the causal effect estimates using DML, it's a good practice to assess the performance of the final model on a completely separate validation set, if available. This ensures that the DML procedure generalizes well to unseen data.

To summarize, handling data splits in DML is integral to its methodology. Properly performed, it ensures that the estimated causal effects are both valid and generalizable.
