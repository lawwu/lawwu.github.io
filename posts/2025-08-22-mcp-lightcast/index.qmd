---
title: 'Building Career Intelligence with MCP Lightcast: A Model Context Protocol
  Server for Job Market Data'
author: MCP Lightcast Team
date: '2025-08-21'
format:
  html:
    toc: true
    toc-depth: 3
    code-fold: true
    theme: cosmo
  pdf:
    toc: true
    number-sections: true
categories: [ai, career]
description: Discover how MCP Lightcast brings real-world job market intelligence
  to AI assistants through seamless integration with Lightcast's comprehensive career
  data APIs.
---

## Introduction: Bridging AI and Career Intelligence

In today's rapidly evolving job market, having access to real-time career data is crucial for making informed decisions about skills development, career transitions, and workforce planning. **MCP Lightcast** represents a groundbreaking integration that brings Lightcast's comprehensive job market intelligence directly to AI assistants through the Model Context Protocol (MCP).

This open-source project transforms how AI assistants can help with career-related queries, from understanding skill demands to analyzing career pathways, all while maintaining the flexibility and security that modern applications require.

## What is MCP Lightcast?

**MCP Lightcast** is a production-ready Model Context Protocol server that provides seamless integration with [Lightcast's APIs](https://lightcast.io/) (formerly Emsi Burning Glass). It enables AI assistants like Claude to access real-world job market data, including:

- **Skills Analysis**: Search and analyze over 32,000+ professional skills
- **Job Titles**: Normalize and explore job titles across industries
- **Career Pathways**: Discover potential career transitions and skill gaps
- **Market Intelligence**: Access job posting data and salary insights
- **Workflow Automation**: Combine multiple APIs for complex career analysis

```{mermaid}
flowchart TD
    A[AI Assistant] --> B[MCP Lightcast Server]
    B --> C[Lightcast Skills API]
    B --> D[Lightcast Titles API]
    B --> E[Lightcast Classification API]
    B --> F[Career Pathways API]
    B --> G[Job Postings API]
    
    C --> H[32K+ Skills Database]
    D --> I[Job Title Normalization]
    E --> J[Skills Extraction from Text]
    F --> K[Career Transition Analysis]
    G --> L[Real-time Job Market Data]
```

## Key Features and Architecture

### 🚀 **Production-Ready Design**

MCP Lightcast is built with enterprise-grade reliability in mind:

- **62% API Coverage**: 18 out of 29 endpoints fully operational
- **Robust Authentication**: OAuth2 with automatic token refresh and scope management
- **Rate Limiting**: Built-in request throttling and error handling
- **Comprehensive Testing**: Unit tests, integration tests, and manual API validation

### 🏗️ **Modular Architecture**

The codebase follows clean architecture principles:

```python
# Dynamic OAuth scoping based on API requirements
API_SCOPES = {
    "skills": "emsi_open",
    "titles": "emsi_open", 
    "classification": "classification_api",
    "similarity": "similarity",
    "career_pathways": "career-pathways"
}

# API-specific base URLs for optimal routing
API_BASE_URLS = {
    "skills": "https://emsiservices.com/skills",
    "titles": "https://emsiservices.com/titles",
    "classification": "https://classification.emsicloud.com"
}
```

### 🔧 **FastMCP Integration**

Built on [FastMCP](https://github.com/phdowling/fastmcp), the server provides:

- **Tool Registration**: Automatic MCP tool discovery and registration
- **Type Safety**: Pydantic models for all API interactions
- **Error Handling**: Comprehensive error reporting and recovery
- **Streaming Support**: Real-time data processing capabilities

## Real-World Applications

### Career Transition Analysis

One of the most powerful features is the ability to analyze career pathways:

```python
# Example: Find skills needed to transition from Data Analyst to Data Scientist
async with TitleNormalizationWorkflow() as workflow:
    result = await workflow.normalize_title_and_get_skills(
        "senior data analyst",
        max_occupations=3,
        max_skills_per_occupation=15
    )
    
    print(f"Found {len(result.skills)} relevant skills:")
    for skill in result.skills:
        print(f"- {skill['name']} (ID: {skill['id']})")
```

### Skills Extraction from Job Descriptions

Transform unstructured job postings into actionable skill insights:

```python
# Extract skills from a job description
job_description = """
We're looking for a Python developer with experience in 
machine learning, Docker, and AWS cloud services.
"""

skills = await classification_client.extract_skills_from_text(
    text=job_description,
    confidence_threshold=0.7
)

# Results: Python, Machine Learning, Docker, AWS, etc.
```

### Market Intelligence Queries

Access real-time job market data:

```python
# Get top skills for software engineers
top_skills = await job_postings_client.get_top_skills(
    occupation_ids=["15-1252.00"],  # Software Developers SOC code
    location="United States",
    limit=20
)
```

## Getting Started

### Prerequisites

- **Python 3.12+** (uses modern typing features)
- **Lightcast API Credentials** ([sign up here](https://lightcast.io/))
- **UV Package Manager** (recommended) or pip

### Quick Setup

```bash
# Clone the repository
git clone https://github.com/your-org/mcp-lightcast.git
cd mcp-lightcast

# Initial setup (installs dependencies, creates .env)
make setup

# Configure your API credentials
echo "LIGHTCAST_CLIENT_ID=your_client_id" >> .env
echo "LIGHTCAST_CLIENT_SECRET=your_client_secret" >> .env

# Run the MCP server
make run
```

### Claude Desktop Integration

Add this configuration to your Claude Desktop settings:

```json
{
  "mcpServers": {
    "lightcast": {
      "command": "uv",
      "args": ["run", "mcp-lightcast", "--port", "3000"],
      "env": {
        "LIGHTCAST_CLIENT_ID": "your_client_id",
        "LIGHTCAST_CLIENT_SECRET": "your_client_secret"
      }
    }
  }
}
```

## API Coverage and Capabilities

### ✅ **Fully Operational APIs**

| API Category | Endpoints | Success Rate | Key Features |
|--------------|-----------|--------------|--------------|
| **Skills** | 4/4 | 100% | Search, details, bulk retrieval, metadata |
| **Titles** | 5/5 | 100% | Search, normalization, hierarchy, metadata |
| **Classification** | 3/5 | 60% | Skills extraction, versions, metadata |
| **Workflow** | 3/3 | 100% | Combined title normalization + skills |

### 🔄 **Powerful Workflow Tools**

The server includes sophisticated workflow tools that combine multiple APIs:

- **Title Normalization + Skills**: Convert job titles to skills requirements
- **Career Pathway Analysis**: Map transitions between occupations
- **Skills Gap Analysis**: Identify missing skills for career moves
- **Market Trend Analysis**: Understand evolving skill demands

## Development and Testing

### Comprehensive Testing Strategy

```bash
# Run all quality checks
make check                    # Lint + type-check + test

# Test with real API calls (requires credentials)
make test-apis-manual        # Manual integration testing

# Test MCP functionality
make test-mcp               # MCP tools integration

# Development server with debug logging
make dev-server
```

### Code Quality Standards

- **Type Safety**: Full mypy compliance with strict mode
- **Code Style**: Black formatting and Ruff linting
- **Test Coverage**: Comprehensive unit and integration tests
- **Documentation**: Detailed API documentation and examples

## Performance and Reliability

### Built-in Resilience

```python
# Automatic retry logic with exponential backoff
async def _make_request(self, method, endpoint, **kwargs):
    try:
        response = await self.client.request(method, url, **kwargs)
        response.raise_for_status()
        return response.json()
    except httpx.HTTPStatusError as e:
        if e.response.status_code == 429:  # Rate limit
            raise RateLimitError(f"Rate limit exceeded")
        raise APIError(f"API request failed: {e.response.status_code}")
```

### OAuth Token Management

- **Automatic Refresh**: Tokens cached until 60 seconds before expiration
- **Scope Switching**: Different tokens for different API requirements
- **Error Recovery**: Graceful handling of authentication failures

## Use Cases and Success Stories

### 1. **HR Technology Platforms**
- Automated skill gap analysis for employees
- Career pathway recommendations
- Job description optimization

### 2. **Educational Institutions**
- Curriculum alignment with market demands
- Student career counseling
- Skills-based program development

### 3. **Recruitment Agencies**
- Candidate skill matching
- Market salary analysis
- Job description standardization

### 4. **Individual Career Planning**
- Personal skill assessment
- Career transition planning
- Market opportunity analysis

## Future Roadmap

### Planned Enhancements

- **Enhanced Premium API Support**: Working with Lightcast to access additional endpoints
- **Real-time Data Streaming**: WebSocket connections for live market updates
- **Advanced Analytics**: Machine learning models for predictive career insights
- **Multi-language Support**: Internationalization for global markets
- **GraphQL Integration**: More flexible data querying capabilities

### Community Contributions

We welcome contributions in:
- API endpoint coverage expansion
- Performance optimizations  
- Documentation improvements
- Integration examples
- Bug fixes and feature requests

## Technical Deep Dive

### Error Handling and Resilience

```python
class BaseLightcastClient:
    async def _make_request(self, method, endpoint, **kwargs):
        """Make authenticated request with comprehensive error handling."""
        try:
            # Set correct OAuth scope
            lightcast_auth._scope = self.required_scope
            headers = await lightcast_auth.get_auth_headers()
            
            response = await self.client.request(
                method=method, url=url, headers=headers, **kwargs
            )
            
            # Handle rate limiting
            if response.status_code == 429:
                reset_time = response.headers.get("RateLimit-Reset")
                raise RateLimitError(f"Rate limit exceeded. Reset: {reset_time}")
                
            response.raise_for_status()
            return response.json()
            
        except httpx.HTTPStatusError as e:
            # Detailed error reporting
            raise APIError(
                f"API request failed: {e.response.status_code}",
                status_code=e.response.status_code,
                response_data=await e.response.json() if e.response.content else None
            )
```

### Configuration Management

The system supports flexible configuration through multiple layers:

```python
# Environment-based configuration with fallbacks
class LightcastConfig(BaseSettings):
    model_config = ConfigDict(extra="ignore")
    
    client_id: str = Field(alias="LIGHTCAST_CLIENT_ID")
    client_secret: str = Field(alias="LIGHTCAST_CLIENT_SECRET")
    base_url: str = Field(default="https://api.lightcast.io")
    oauth_scope: str = Field(default="emsi_open")
```

## Conclusion

MCP Lightcast represents a significant step forward in making career intelligence accessible to AI assistants. By providing a robust, production-ready integration with Lightcast's comprehensive APIs, it opens up new possibilities for career counseling, workforce planning, and skills development.

Whether you're building HR technology, educational platforms, or personal career tools, MCP Lightcast provides the foundation for data-driven career insights. With its modular architecture, comprehensive testing, and active development, it's ready to power the next generation of career intelligence applications.

## Get Involved

- **GitHub Repository**: [https://github.com/lawwu/mcp-lightcast](https://github.com/lawwu/mcp-lightcast)
- **Documentation**: Complete API documentation and examples
- **Community**: Join our discussions and contribute to the project
- **Issues**: Report bugs and request features

---

*MCP Lightcast is an open-source project that bridges AI assistants with real-world career data. It's built with modern Python practices, comprehensive testing, and production reliability in mind. Start exploring career intelligence today!*