---
title: "Why Companies Should Open Source and Host Their Own MCP Servers"
date: 2025-08-21
categories: [AI, MCP, LLMs, Infrastructure]
---

The **Model Context Protocol (MCP)** is quickly becoming a standard interface for how agents and LLM-powered clients interact with tools and APIs. What’s exciting is that some companies are already hosting **public-facing MCP servers**. For example, Atlassian provides one here: [Getting Started with the Atlassian Remote MCP Server](https://support.atlassian.com/rovo/docs/getting-started-with-the-atlassian-remote-mcp-server/).  

Their MCP server lives at: [https://mcp.atlassian.com/v1/sse](https://mcp.atlassian.com/v1/sse).

This means customers can simply plug in that URL, add their authentication credentials, and instantly connect **any MCP client**—whether that’s VS Code, Windsurf, ChatGPT ([directly now in their Responses API](https://platform.openai.com/docs/guides/tools-remote-mcp), [Claude Code](https://docs.anthropic.com/en/docs/claude-code/mcp)), or agent frameworks like [LangGraph](https://github.com/langchain-ai/langgraph) and [ADK](https://github.com/google/adk-python). The customer never has to worry about deploying or managing their own MCP instance.  

That’s a powerful model—and one that more companies should follow.  

---

## Why This Matters for Companies

Each company has an opportunity to be forward-leaning and recognized as an **AI-first company** in how they adopt and expose MCP internally and externally.  

Right now, very few companies are both:

- **Open sourcing their MCP Server code**, and  
- **Hosting public remote MCP servers**.  

I think companies should do both. Here’s how.

---

## Recommended Next Steps

### 1. Identify Endpoints and Workflows to Expose as MCP Tools  
Not every REST API makes a good MCP tool. Instead of exposing every single endpoint, you should focus on **common workflows** that agents will use.  

- Example: When I built a Python SDK for the Lightcast API, a frequent operation was normalizing job titles and retrieving related skills. Doing this directly required *three* separate API calls. Instead, I created a **dedicated workflow API** that bundled those calls together—much more natural for an agent.  

- Jeremiah Lowin (creator of FastMCP) describes this well in [Stop Converting REST APIs to MCP](https://www.jlowin.dev/blog/stop-converting-rest-apis-to-mcp):  
  > *“An API that is ‘sophisticated’ for a human is one with rich, composable, atomic parts. An API that is sophisticated for an agent is one that is ruthlessly curated and minimalist.”*  

You should design with the agent in mind. That might mean rethinking data formats (YAML is often better than JSON) or collapsing multi-step operations into a single MCP tool.

---

### 2. Build the API Client, MCP Server, and Tools  
The typical stack looks like this:  

- **API Client**: Handles authentication and connectivity to your company’s APIs.  
- **MCP Server**: Implements the MCP protocol on top of that client.  

All of the MCP servers I’ve written so far are in Python, using [FastMCP](https://github.com/jlowin/fastmcp) as the framework. The pattern is straightforward:

1. Write an API Client.  
2. Layer the MCP protocol logic on top.  

You can use agentic coding tools like Claude Code to quickly spin these up.

---

### 3. Deploy the MCP Server Publicly  
There are more options than ever for running lightweight public services:  
- [Google Cloud Run](https://cloud.google.com/blog/topics/developers-practitioners/build-and-deploy-a-remote-mcp-server-to-google-cloud-run-in-under-10-minutes)  
- [Cloudflare Workers](https://blog.cloudflare.com/remote-model-context-protocol-servers-mcp/)   

Each of these can make your MCP server accessible with minimal operational overhead.

---

### 4. Provide Example Clients and Agents  
To encourage adoption, publish sample implementations that connect to the server. These could be: 

- VS Code extensions  
- LangGraph or ADK agents  
- Example workflows in ChatGPT or Claude  

This lowers the barrier for customers to experiment quickly.

---

### 5. Open Source the MCP Server  
Some of the most popular MCP servers today aren't even official. For example, the **[mcp-atlassian](https://github.com/sooperset/mcp-atlassian)** project is developed by an open-source developer [Hyeonsoo Lee](https://github.com/sooperset) and not by Atlassian. That's a missed opportunity.  

If companies open source their MCP servers, the benefits are significant:  

- Community contributions and bug fixes  
- Customer self-hosting when desired  
- Stronger trust and transparency

---

## Popular Remote MCP Servers

Several companies are already providing remote MCP servers that you can connect to directly. Here are some notable examples from the [Claude Code MCP docs](https://docs.anthropic.com/en/docs/claude-code/mcp):

### Adding Remote Servers to Claude Code

You can easily add these servers to Claude Code using the CLI. Note some of these are not remote MCP servers. Here are the exact commands:

#### Development & Testing Tools
```bash
claude mcp add --transport http sentry https://mcp.sentry.dev/mcp
claude mcp add --transport http socket https://mcp.socket.dev/
claude mcp add --transport http hugging-face https://huggingface.co/mcp
claude mcp add --transport http jam https://mcp.jam.dev/mcp
```

#### Project Management
```bash
claude mcp add --transport sse asana https://mcp.asana.com/sse
claude mcp add --transport sse atlassian https://mcp.atlassian.com/v1/sse
claude mcp add clickup --env CLICKUP_API_KEY=YOUR_KEY --env CLICKUP_TEAM_ID=YOUR_ID -- npx -y @hauptsache.net/clickup-mcp
claude mcp add --transport http intercom https://mcp.intercom.com/mcp
claude mcp add --transport sse linear https://mcp.linear.app/sse
claude mcp add --transport http notion https://mcp.notion.com/mcp
claude mcp add --transport http box https://mcp.box.com/
claude mcp add --transport http fireflies https://api.fireflies.ai/mcp
claude mcp add --transport sse monday https://mcp.monday.com/sse
```

#### Databases
```bash
claude mcp add airtable --env AIRTABLE_API_KEY=YOUR_KEY -- npx -y airtable-mcp-server
claude mcp add --transport http daloopa https://mcp.daloopa.com/server/mcp
claude mcp add --transport http hubspot https://mcp.hubspot.com/anthropic
```

#### Payments & Commerce
```bash
claude mcp add --transport http paypal https://mcp.paypal.com/mcp
claude mcp add --transport sse plaid https://api.dashboard.plaid.com/mcp/sse
claude mcp add --transport sse square https://mcp.squareup.com/sse
claude mcp add --transport http stripe https://mcp.stripe.com
```

#### Design
```bash
claude mcp add --transport http figma-dev-mode-mcp-server http://127.0.0.1:3845/mcp
claude mcp add --transport sse invideo https://mcp.invideo.io/sse
claude mcp add --transport http canva https://mcp.canva.com/mcp
```

#### Infrastructure / DevOps
```bash
claude mcp add --transport http netlify https://netlify-mcp.netlify.app/mcp
claude mcp add --transport http stytch http://mcp.stytch.dev/mcp
claude mcp add --transport http vercel https://mcp.vercel.com/
```

For more details, see the [Claude Code MCP documentation](https://docs.anthropic.com/en/docs/claude-code/mcp).

---
